name: 'Main pipeline'

on: [workflow_call, push]

env:
  TF_VARS: ${{ secrets.TF_VARS }}
  GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
  APPLICATION_NAME: "parking-application"
  DEFAULT_REGION: "us-central1"

jobs:
    terraform:
        name: 'Terraform test'
        environment: 'dev'
        runs-on: ubuntu-latest
        defaults:
            run:
                shell: bash
        steps: 
        # Checkout repo to Github Actions runner
        - name: Checkout
          uses: actions/checkout@v4.1.1
        
        # Log in with secret
        - id: 'auth'
          name: 'Authenticate to Google Cloud'
          uses: 'google-github-actions/auth@v2'
          with:
            credentials_json: '${{ env.GOOGLE_APPLICATION_CREDENTIALS }}'
        
        # Setup Terraform into the runner
        - name: Setup terraform
          uses: hashicorp/setup-terraform@v1
          with:
            terraform_wrapper: false

        # Iterate through each variable on secret tfvars and reformat data if needed
        - name: Variable iteration
          run: |
            for v in "${{ secrets.TF_VARS }}"; do echo $v >> terraform.tfvars; done
            cat terraform.tfvars
        
        # Initialize Terraform
        - name: Terraform init
          run: terraform init
        
        # Format and check terraform files to canonical (Prevents reading issues in ubuntu, specially with the new .tfvars file)
        - name: Terraform format check
          if: success() || failure()
          run: |
            terraform fmt
            terraform fmt -check
        
        # Terraform validate
        - name: Terraform validate
          if: success() || failure()
          run:  terraform validate -no-color

        # Terraform plan
        - name: Terraform plan
          run: terraform plan -input=false --var-file=terraform.tfvars
    
    infrastructure:
        name: 'Deploy infrastructure'
        runs-on: ubuntu-latest
        environment: 'prod'
        needs: [ terraform ]
        defaults:
          run:
              shell: bash
        steps:
        # Terraform apply
        - id: terraform-apply
          name: Terraform apply
          run: terraform apply -auto-approve -input=false
        
        # Terraform outputs
        - id: terraform-outputs
          name: Terraform outputs
          run: |
            echo "ARTIFACT_REGISTRY=$(terraform output -raw artifact-registry-path)" >> $GITHUB_OUTPUT
            echo "SHORT_ARTIFACT_REGISTRY=$(terraform output -raw artifact-registry-short-path)" >> $GITHUB_OUTPUT
            echo "MAIN_GKE_CLUSTER=$(terraform output -raw main_gke_cluster)" >> $GITHUB_OUTPUT
          working-directory: ./terraform
      
    application:
        name: 'Load application'
        runs-on: ubuntu-latest
        environment: 'dev'
        needs: [ infrastructure ]
        defaults:
            run:
                shell: bash
        steps:
        # Build the Docker image of the application
        - name: Build image
          run: docker build . \
            -t ${{ env.APPLICATION_NAME }} \
            --build-arg GITHUB_SHA="$GITHUB_SHA" \
            --build-arg GITHUB_REF="$GITHUB_REF"
          working-directory: ./app

        # Configure local Docker client
        - name: Configure Docker
          run: gcloud auth configure-docker ${{ steps.terraform_outputs.outputs.SHORT_ARTIFACT_REGISTRY }}
        
        # Push the Docker image to Artifact Registry
        - name: Publish
          run: |
            docker tag ${{ env.APPLICATION_NAME }} ${{ steps.terraform_outputs.outputs.ARTIFACT_REGISTRY }}/${{ env.APPLICATION_NAME }}
            docker push ${{ steps.terraform_outputs.outputs.ARTIFACT_REGISTRY }}/${{ env.APPLICATION_NAME }}
      
    deploy:
        name: 'Deploy application'
        runs-on: ubuntu-latest
        environment: 'prod'
        needs: [ infrastructure, application ]
        defaults:
          run:
              shell: bash
        steps:
        # Catch existing cluster
        - name: Catch existing cluster
          run: gcloud container clusters get-credentials ${{ steps.terraform_outputs.outputs.MAIN_GKE_CLUSTER }} --location ${{ env.DEFAULT_REGION }}

        # Deploy on GKE
        - name: Deploy on GKE
          run: kubectl create deployment ${{ env.APPLICATION_NAME }} --image=${{ steps.terraform_outputs.outputs.ARTIFACT_REGISTRY }}/${{ env.APPLICATION_NAME }}

        # Expose cluster
        - name:
          run: kubectl expose deployment ${{ env.APPLICATION_NAME }} \
            --type LoadBalancer \
            --port 80 \
            --target-port 5003